package com.example.yeshendrayt.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.yeshendrayt.dto.BookingDTO;
import com.example.yeshendrayt.entity.Booking;
import com.example.yeshendrayt.entity.BookingStatus;
import com.example.yeshendrayt.entity.Show;
import com.example.yeshendrayt.repository.BookingRepo;
import com.example.yeshendrayt.repository.ShowRepo;

@Service
public class BookingService {

	@Autowired
	private BookingRepo bookingRepo;

	@Autowired
	private ShowRepo showRepo;

	public Booking createBooking(BookingDTO bookingDTO) {

		Show show = showRepo.findById(bookingDTO.getShowId()).orElseThrow(() -> new RuntimeException("Show not found"));

		if (!isSeatsAvailable(show.getId(), bookingDTO.getNumberOfSeats())) {
			throw new RuntimeException("Not enough saet are avilable");
		}
		
		if(bookingDTO.getSeatNumbers().size() != bookingDTO.getNumberOfSeats()) {
			throw new RuntimeException("Seat Numbers and Number of Seats must be equal");

		}
		
		validateDuplicateSeats(show.getId(), bookingDTO.getSeatNumbers());

	}

	public boolean isSeatsAvailable(Long showid, Integer numberOfSeats) {

		Show show = showRepo.findById(showid).orElseThrow(() -> new RuntimeException("Show not found"));

		int bookedSeats=show.getBookings().stream()
							.filter(booking -> booking.getBookingStatus()!= BookingStatus.CANCELLED)
							.mapToInt(Booking::getNumberOfSeats)
							.sum();
		return (show.getTheater().getTheatreCapacity() - bookedSeats) >= numberOfSeats;
							
							
	}
	
	
	public void validateDuplicateSeats(Long showId, List<String> seatNumber) {
		Show show = showRepo.findById(showid).orElseThrow(() -> new RuntimeException("Show not found"));

		
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	

}
