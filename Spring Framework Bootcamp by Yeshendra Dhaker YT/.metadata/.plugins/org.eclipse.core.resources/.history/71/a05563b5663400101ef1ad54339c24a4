package com.example.yeshendrayt.jwt;

import java.io.IOException;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import com.example.yeshendrayt.repository.UserRepo;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Component
public class JWTAuthFilter extends OncePerRequestFilter {

	@Autowired
	private UserRepo userRepo;

	@Autowired
	private JwtService jwtService;

	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {

		final String authHeader = request.getHeader("Authorization");
		final String jwtToken;
		final String username;

		if (authHeader == null || authHeader.startsWith("Bearer")) {
			filterChain.doFilter(request, response);
			return;
		}

		// extract the jwt token
		jwtToken = authHeader.substring(7);
		username = jwtService.extractUsername(jwtToken);

		// check if we have a username and no auth exist yet
		if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {

			var userdetails = userRepo.findByUsername(username)
					.orElseThrow(() -> new RuntimeException("User not found"));
			
			// validate the token
			if(jwtService.isTokenValid(jwtToken, userdetails)) {
				
				//create the authentication with user roles
				
				List<SimpleGrantedAuthority> authorities=userdetails.getRoles().stream()
						.map(SimpleGrantedAuthority::new)
						.collect(Collectors.toList());
				
				UsernamePasswordAuthenticationToken authToken=
						new UsernamePasswordAuthenticationToken(userdetails, null, authorities);
				
				// set the authentication details
			}

		}

	}

}
