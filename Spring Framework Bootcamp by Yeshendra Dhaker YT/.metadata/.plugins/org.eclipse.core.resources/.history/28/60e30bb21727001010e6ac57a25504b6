package com.example.yeshendrayt.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import org.springframework.stereotype.Service;

import com.example.yeshendrayt.entity.Email;

import jakarta.annotation.PostConstruct;
import jakarta.mail.BodyPart;
import jakarta.mail.Folder;
import jakarta.mail.Message;
import jakarta.mail.Session;
import jakarta.mail.Store;
import jakarta.mail.internet.InternetAddress;
import jakarta.mail.internet.MimeMultipart;

@Service
public class GmailReciverService {

	private List<Email> allEmailsList = new ArrayList<>();
	private int lastMessageCount = -1;

	@PostConstruct
	public void initialMails() {
		try {
			fetchAllMails();
		} catch (Exception e) {
			System.out.println("Error fetching mails on startup: " + e.getMessage());
		}

	}

//	  public void initialMails() {
//	        // Ensure no email fetch happens at startup
//	        System.out.println("This method is being called!");
//	    }
//	    
	
	public void newlyRecievedMails() {

	}

	public void fetchAllMails() {
		try {
			System.out.println("Starting to fetch emails...");
			Properties props = new Properties();
			props.put("mail.store.protocol", "imap");
			props.put("mail.imap.host", "imap.gmail.com");
			props.put("mail.imap.port", "993");
			props.put("mail.imap.ssl.enable", "true");

			Session session = Session.getInstance(props);
			Store store = session.getStore("imap");
			   System.out.println("Connecting to Gmail IMAP...");
			store.connect("imap.gmail.com", "theahmed298@gmail.com", "zsvv hosj xhdd rukr");
			System.out.println("Connected to Gmail IMAP...");
			Folder inboxFolder = store.getFolder("INBOX");
			inboxFolder.open(Folder.READ_ONLY);

			Message[] allMails = inboxFolder.getMessages();
			System.out.println("Initial Fetch total mails count" + allMails.length);
			for (int i = 0; i < allMails.length; i++) {
			    System.out.println("Reading message " + (i + 1));
			    try {
			        Message message = allMails[i];
			        System.out.println("Got message object.");

			        Email email = new Email();
			        email.setFrom(message.getFrom() != null ? InternetAddress.toString(message.getFrom()) : "Unknown");
			        email.setSubject(message.getSubject() != null ? message.getSubject() : "No Subject");
			        email.setRecivedDate(message.getReceivedDate());

			        try {
			           // email.setContent(getTextFromMessage(message));
			        	// email.setContent(getTextFromMessage(message));
			        	email.setContent("Dummy content");
			        	System.out.println("Message processed and added.");

			        } catch (Exception e) {
			            System.out.println("Error parsing message content.");
			            e.printStackTrace();
			           // email.setContent("Could not read content.");
			        }

			        allEmailsList.add(email);
			    } catch (Exception e) {
			        System.out.println("Error reading message " + (i + 1));
			        e.printStackTrace();
			    }
			}

			System.out.println(allEmailsList.toString());
			lastMessageCount = inboxFolder.getMessageCount();
			System.out.println("last Message count " + lastMessageCount);

			inboxFolder.close(false);
			store.close();

		} catch (Exception e) {
			System.out.println("Error in fetching initial mails " + e.getMessage());
		}

	}

	public String getTextFromMessage(Message message) throws Exception {
		if (message.isMimeType("text/plain")) {
			return message.getContent().toString();
		} else if (message.isMimeType("multipart/*")) {
			MimeMultipart mimeMultipart = (MimeMultipart) message.getContent();
			return getTextFromMimeMultipart(mimeMultipart);
		}
		return "";
	}

	public String getTextFromMimeMultipart(MimeMultipart mimeMultipart) throws Exception {
		StringBuilder builder = new StringBuilder();
		for (int i = 0; i < mimeMultipart.getCount(); i++) {
			BodyPart bodyPart = mimeMultipart.getBodyPart(i);
			if (bodyPart.isMimeType("text/plain")) {
				builder.append(bodyPart.getContent());
			}
		}

		return builder.toString();
	}

	public List<Email> getEmails() {
		return allEmailsList;
	}

}
