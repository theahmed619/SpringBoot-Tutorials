package com.example.yeshendrayt.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import org.springframework.stereotype.Service;

import com.example.yeshendrayt.entity.Email;

import jakarta.annotation.PostConstruct;
import jakarta.mail.BodyPart;
import jakarta.mail.Folder;
import jakarta.mail.Message;
import jakarta.mail.Session;
import jakarta.mail.Store;
import jakarta.mail.internet.InternetAddress;
import jakarta.mail.internet.MimeMultipart;

@Service
public class GmailReciverService {
	
	private List<Email> allEmailsList= new ArrayList<>();
	private int lastMessageCount=-1;
	
	@PostConstruct
	public void initialMails() {
		fetchAllMails();
		
	}
	
	public void newlyRecievedMails() {
		
	}
	private void fetchAllMails() {
		try {
		Properties props=new Properties();
		props.put("mail.store.protocol", "imap");
		props.put("mail.imap.host","imap.gmail.com");
		props.put("mail.imap.port","993");
		props.put("mail.imap.ssl.enable","true");
		
		Session session=Session.getInstance(props);
		Store store=session.getStore("imap");
		store.connect("imap.gmail.com","theahmed298@gmail.com","mdts mkam xmvg lcdz");
		
		Folder inboxFolder=store.getFolder("INBOX");
		inboxFolder.open(Folder.READ_ONLY);
		
		Message[] allMails=inboxFolder.getMessages();
		System.out.println("Initial Fetch total mails count"+allMails.length);
		for(Message message:allMails) {
			Email email=new Email();
			email.setFrom(InternetAddress.toString(message.getFrom()));
			email.setSubject(message.getSubject());
			email.setRecivedDate(message.getReceivedDate());
			email.setContent(getTextFromMessage(message));
			
			allEmailsList.add(email);
			
			
		}
		lastMessageCount=inboxFolder.getMessageCount();
		System.out.println("last Message count "+lastMessageCount);
		
		inboxFolder.close(false);
		store.close();
		
		}catch (Exception e) {
		System.out.println("Error in fetching initial mails "+e.getMessage());
		}
		
	}
	
	public String getTextFromMessage(Message message) throws Exception {
		if(message.isMimeType("text/plain")) {
			return message.getContent().toString();
		}
		else if(message.isMimeType("multipart/*")) {
			MimeMultipart mimeMultipart=(MimeMultipart) message.getContent();
			return getTextFromMimeMultipart(mimeMultipart);
		}
		return "";
	}
	
	public String getTextFromMimeMultipart(MimeMultipart mimeMultipart) throws Exception{
		StringBuilder builder=new StringBuilder();
		for(int i=0; i<mimeMultipart.getCount();i++) {
			BodyPart  bodyPart=mimeMultipart.getBodyPart(i);
			if(bodyPart.isMimeType("text/plain")) {
				builder.append(bodyPart.getContent());
			}
		}
		
		return builder.toString();
	}

}
